

Brute Force Approach 
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int[] result = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            int productOfEle = 1;
            for (int j = 0; j < nums.length; j++) {
                if(i != j){
                    productOfEle = productOfEle * nums[j];
                }
            }
            result[i]  = productOfEle;
        }
        return result;
    }
}


TC O(n2)
SC O(n)


Better Approach 

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int [] left = new int[nums.length];
        int [] right = new int [nums.length];
        left[0]=1;
        for(int i=1;i<nums.length;i++){
            left[i]= left[i-1]*nums[i-1];
        }
        right[nums.length-1]= 1;
        for(int i=nums.length-2; i>-1;i--){
            right[i]= right[i+1]*nums[i+1];
        }

        int[] answer = new int [nums.length];
        for(int i=0;i<nums.length;i++)
        {
            answer[i]= left[i]*right[i];
        }
      return answer;
    }
}


TC: O(n)
SC: O(n)
