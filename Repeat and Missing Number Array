Given: 
	You are given a read only array of n integers from 1 to n.
	Each integer appears exactly once except A which appears twice and B which is missing.
	Return A and B.
	Note: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

	Note that in your output A should precede B.
	Example:
	Input:[3 1 2 5 3] 
	Output:[3, 4] 
	A = 3, B = 4

Approach: 
1. I used and added all the elements to it until I found duplicate 
	Why set? becouse in set it take O(1) time for manipulating it
	
2. I used sum of n natural number formuala n(n+1)/2 to find out the total sum 
	ideally should be there and then I subtracted from the elements actually present
	in the array.
	


Code: 
	public class Solution {
		public int[] repeatedNumber(final int[] A) {
			Set<Integer> nonduplicate = new HashSet<Integer>();
			int[] arr = new int[2];
			long lenOfArray = A.length;
			long sumOfArray = 0;
			for(int i = 0; i < (int)lenOfArray; i++){
				if(nonduplicate.contains(A[i])){
				   arr[0] = A[i]; 
				}
				else{
					nonduplicate.add(A[i]);
					sumOfArray += A[i];
				}
			}
			arr[1] = (int)((lenOfArray*(lenOfArray+1))/2 - sumOfArray);
			return arr;
		}
	}

https://www.interviewbit.com/problems/repeat-and-missing-number-array/discussion/p/best-solution-using-java-o-n-time-complexity/484127/492/
